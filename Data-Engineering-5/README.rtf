
Real-Time Ad API Caching with Redis


API Functionality:
- GET /campaign/{campaign_id}/performance
  Returns CTR, clicks, impressions, and ad spend for a campaign (cache TTL — 30 seconds).
- GET /advertiser/{advertiser_id}/spending  
  Returns total ad spend for an advertiser (cache TTL — 5 minutes).
- GET /user/{user_id}/engagements  
  Returns a list of ads the user has engaged with (cache TTL — 120 seconds).

Technologies Used
- Python 3.11
- FastAPI — REST API
- MySQL — ad_analytics_db
- Redis — cache
- Docker Compose — infrastructure
- SQLAlchemy — MySQL connection
- Pydantic — data validation


Launch
Start Redis and the API: docker compose up -d --build
Check the service health: curl http://localhost:8000/health. Response: {"redis": true, "mysql": true}


API Usage in Screenshots


Benchmarking results The tests were conducted with 50 requests for each endpoint in two modes:
	•	Cold cache — the cache was cleared before execution
	•	Warm cache — data was served from Redis


Endpoint
TTL
Cold p50 (ms)
Cold avg (ms)
Cold p95 (ms)
Warm p50 (ms)
Warm avg (ms)
Warm p95 (ms)
/campaign/{id}/performance
30s
1.81
12.03
6.70
1.56
1.84
3.89
/advertiser/{id}/spending
300s
1.76
3.95
5.98
1.56
1.77
3.51
/user/{id}/engagements
120s
1.68
11.65
7.23
2.01
2.17
3.50



