
Ad Performance Analytics with Cassandra

Technologies Used
	•	Apache Cassandra – NoSQL DB for horizontal scalability and performance.
	•	MySQL – Source database (used for staging raw advertising data).
	•	Python – Data processing and ETL scripts.
	•	Pandas & SQLAlchemy – For querying MySQL and preprocessing.
	•	uuid – For consistent UUID generation.

Usage Instructions
1. Prepare the environment
docker-compose.yml (docker-compose up -d)
pip install pandas sqlalchemy cassandra-driver
2. Create Cassandra Tables
Use the provided CQL scripts to create the required tables in Cassandra (Create_tables_queries.txt) . Alternatively, you can run the CREATE TABLE statements interactively via cqlsh.
3. Populate Tables
Run the Python scripts (inser_tables_CQL_queries.ipynb) to:
	•	Connect to MySQL
	•	Perform necessary transformations
	•	Insert data into Cassandra tables
Each script focuses on one table (e.g., populate_campaign_performance.py, populate_advertisers.py, etc.)

Notes
	•	UUIDs are deterministically generated using uuid.uuid5() for consistency.
	•	Cassandra's constraints (e.g., no ORDER BY without partition key) are considered in design.
	•	ALLOW FILTERING is used cautiously and only when necessary.
	•	Please, note that in the first lab normalized dataset was prepared by cutting data (70k raws left in each month). The document of data preparation is load_sample.ipynb. So it impacted the results of the Lab 4

Screenshots 

